//___________________Global functions_______________________

function GenPrime(sec)
	while true do
		p := NextPrime(Random(2^(sec-1), 2^sec-1));
		if (p lt 2^sec) then
			return p;
		end if;
	end while;
end function;

function GenPrimeBBS(sec)
	while true do
		p := NextPrime(Random(2^(sec-1), 2^sec-1));
		if (p lt 2^sec and p mod 4 eq 3) then
			return p;
		end if;
	end while;
end function;

//__________________________________________________

//ex 1

function CreateShares(param, s, n, k)
	p := param[1];
	q := param[2];
	//g,h are elements of GF(p)
	g := param[3];
	h := param[4];
	//t,s are elements of GF(q)
	t := Random(GF(q));
	P<x> := PolynomialRing(GF(q));
	//Create a random polynomial in GF(q) with constant
	//term s
	F := Polynomial([s] cat [Random(GF(q)) : i in [1..k-1]]);
	//Create a random polynomial in GF(q) with constant
	//term t
	G := Polynomial([t] cat [Random(GF(q)) : i in [1..k-1]]);
	//Create shares <si, ti, i>
	W := [<Evaluate(F,GF(q)!i), Evaluate(G,GF(q)!i), i> : i in [1..n]];
	//Create verify values Ei 
	V := [g^Integers()!Coefficient(F,i)*h^Integers()!Coefficient(G,i): i in [0..k-1]];
	return V, W;
end function;

function VerifyAndRecoverSecret(param, Wprime, V)
	g := param[3];
	h := param[4];
	k := #V;
	//Verify E(si,ti) = \prod_{j=0}^{k-1} Ej^{i^j}
	if (&and[g^Integers()!Wprime[i][1]*h^Integers()!Wprime[i][2] eq &*[V[j]^(Wprime[i][3]^(j-1)) : j in [1..k]] : i in [1..k]]) then
		//Compute s = \sum_{i\in I}ai si con
		//ai = \prod_{j\in I, i\neq j} j/(j-i)
		s := &+[(k eq 1 select 1 else (&*[Wprime[j][3] : j in ({1..k} diff {i})] / &*[Wprime[j][3] - Wprime[i][3]: j in ({1..k} diff {i})])) * Wprime[i][1] : i in [1..k]];
		return <true, s>;
	end if;
	return <false, 0>;
end function;

//__________________________________________________

//ex 2

function MicaliSchnorrPRNG(k,l)
	//Generate parameters
	repeat
		p := GenPrime(k);
		repeat
			q := GenPrime(k);
		until (q ne p);
		n := p*q;
		phin := (p-1)*(q-1);
		N := Ilog(2,n) + 1;
		for i in [1..100] do
			e := Random([2..Min(phin-1, N div 80)]);
			if (GCD(e,phin) eq 1) then
				break;
			end if;
		end for;
	until (GCD(e,phin) eq 1);
	d := Floor(N*(1-2/e));
	r := N - d;
	p,q,n,phin,N,e,d,r;
	//Generate random bits
	x := Random([1..2^r-1]);
	z := [];
	for i in [1..l] do
		y := Modexp(x,e,n);
		y1 := Intseq(y,2);
		x := Seqint(y1[Max(1, #y1-r+1)..#y1],2);
		//Note that taking modulus 2^d returns a number 
		//whose binary representation is composed of the 
		//d-least significant bits di yi
		z := z cat Intseq(y mod 2^d, 2, d);
	end for;
	return z;
end function;

//__________________________________________________

//ex 3

function BlumBlumShubPRNG(k,l)
	//Generate parameters
	p := GenPrimeBBS(k);
	repeat
		q := GenPrimeBBS(k);
	until (q ne p);
	n := p*q;
	repeat
		s := Random([1..n-1]);
	until (GCD(s,n) eq 1);
	//Generate random bits
	x := Modexp(s,2,n);
	z := [];
	for i in [1..l] do
		x := Modexp(x,2,n);
		z := z cat [x mod 2];
	end for;
	return z;
end function;

//__________________________________________________

/*VERIFICATION*/

function GenPrime(sec)
	while true do
		p := NextPrime(Random(2^(sec-1), 2^sec-1));
		if (p lt 2^sec) then
			return p;
		end if;
	end while;
end function;

function Test(sec)
	n := 16;
	k := 5;
	repeat
		p := GenPrime(sec);
		for i in [1..10] do
			g := Random(Set(GF(p)) diff {0});
			q := Order(g);
			//I require q <= n to avoid that the participants
			//have equal shares (due to the reduction) of
			//the indices modulo q
			if (IsPrime(q) and q gt n) then
				break;
			end if;
		end for;
	until (IsPrime(q) and q gt n);
	b := Random([2..q-1]);
	h := g^b;
	param := <p, q, g, h>;
	s := Random(GF(q));
	param, s, n, k;
	V, W := CreateShares(param, s, n, k);
	I := {1..n};
	S := [];
	for i in [1..k] do
		el := Random(I);
		S := S cat [el];
		I := I diff {el};
	end for;
	Wprime := W[S];
	answer := VerifyAndRecoverSecret(param, Wprime, V);
	return answer[1] and answer[2] eq s;
end function;

/*

Test(10);

//In MicaliSchnorr choose k >= 120 so that N >= 240 = 80*3 and at least 
//e = 3 is admitted

k := 120;
l := 5;
MicaliSchnorrPRNG(k,l);

k := 120;
l := 300;
BlumBlumShubPRNG(k,l);

*/