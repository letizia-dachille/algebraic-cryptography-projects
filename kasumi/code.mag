//Project Kombat: KASUMI
//Group Dead Snow: D'Achille Letizia, Montanari Sara
//Final project by D'Achille Letizia

//Sbox S7 used in FI function implemented as lookup table
function S7(N)
	return [54, 50, 62, 56, 22, 34, 94, 96, 38, 6, 63, 93, 2, 18, 123, 33, 55, 113, 39, 114, 21, 67, 65, 12, 47, 73, 46, 27, 25, 111, 124, 81, 53, 9, 121, 79, 52, 60, 58, 48, 101, 127, 40, 120, 104, 70, 71, 43, 20, 122, 72, 61, 23, 109, 13, 100, 77, 1, 16, 7, 82, 10, 105, 98, 117, 116, 76, 11, 89, 106, 0, 125, 118, 99, 86, 69, 30, 57, 126, 87, 112, 51, 17, 5, 95, 14, 90, 84, 91, 8, 35,103, 32, 97, 28, 66, 102, 31, 26, 45, 75, 4, 85, 92, 37, 74, 80, 49, 68, 29, 115, 44, 64, 107, 108, 24, 110, 83, 36, 78, 42, 19, 15, 41, 88, 119, 59, 3][N];
end function;

//Sbox S9 used in FI function implemented as lookup table
function S9(N)
	return [167,239,161,379,391,334, 9,338, 38,226, 48,358,452,385, 90,397,183,253,147,331,415,340, 51,362,306,500,262, 82,216,159,356,177, 175,241,489, 37,206, 17, 0,333, 44,254,378, 58,143,220, 81,400, 95, 3,315,245, 54,235,218,405,472,264,172,494,371,290,399, 76, 165,197,395,121,257,480,423,212,240, 28,462,176,406,507,288,223, 501,407,249,265, 89,186,221,428,164, 74,440,196,458,421,350,163, 232,158,134,354, 13,250,491,142,191, 69,193,425,152,227,366,135, 344,300,276,242,437,320,113,278, 11,243, 87,317, 36, 93,496, 27, 487,446,482, 41, 68,156,457,131,326,403,339, 20, 39,115,442,124, 475,384,508, 53,112,170,479,151,126,169, 73,268,279,321,168,364, 363,292, 46,499,393,327,324, 24,456,267,157,460,488,426,309,229, 439,506,208,271,349,401,434,236, 16,209,359, 52, 56,120,199,277, 465,416,252,287,246, 6, 83,305,420,345,153,502, 65, 61,244,282, 173,222,418, 67,386,368,261,101,476,291,195,430, 49, 79,166,330, 280,383,373,128,382,408,155,495,367,388,274,107,459,417, 62,454, 132,225,203,316,234, 14,301, 91,503,286,424,211,347,307,140,374, 35,103,125,427, 19,214,453,146,498,314,444,230,256,329,198,285, 50,116, 78,410, 10,205,510,171,231, 45,139,467, 29, 86,505, 32, 72, 26,342,150,313,490,431,238,411,325,149,473, 40,119,174,355, 185,233,389, 71,448,273,372, 55,110,178,322, 12,469,392,369,190, 1,109,375,137,181, 88, 75,308,260,484, 98,272,370,275,412,111, 336,318, 4,504,492,259,304, 77,337,435, 21,357,303,332,483, 18, 47, 85, 25,497,474,289,100,269,296,478,270,106, 31,104,433, 84, 414,486,394, 96, 99,154,511,148,413,361,409,255,162,215,302,201, 266,351,343,144,441,365,108,298,251, 34,182,509,138,210,335,133, 311,352,328,141,396,346,123,319,450,281,429,228,443,481, 92,404, 485,422,248,297, 23,213,130,466, 22,217,283, 70,294,360,419,127, 312,377, 7,468,194, 2,117,295,463,258,224,447,247,187, 80,398, 284,353,105,390,299,471,470,184, 57,200,348, 63,204,188, 33,451, 97, 30,310,219, 94,160,129,493, 64,179,263,102,189,207,114,402, 438,477,387,122,192, 42,381, 5,145,118,180,449,293,323,136,380, 43, 66, 60,455,341,445,202,432, 8,237, 15,376,436,464, 59,461][N];
end function;

//FI function
//Input: 	16 bit sequence I
//			16 bit sequence KI
//Output: 	16 bit sequence
function FI(I,KI);
	//Split the input in two sequences respectively of 9 and 7 elements
	L := I[1..9];
	R := I[10..16];
	//Iterate:
	//	Precompute Sbox S9 or S7 not to repeat the operation for each bit (9 or 7 times respectively)
	//	Apply ZE to expand the sequence or TR to reduce the sequence
	//Each round uses the same variable to minimize the memory we use
	A := ChangeUniverse(Reverse(Intseq(S9(Seqint(Reverse(ChangeUniverse(L, Integers())), 2) + 1), 2, 9)), GF(2));
	L := [A[i] + ([0, 0] cat R)[i] : i in [1..9]];
	A := ChangeUniverse(Reverse(Intseq(S7(Seqint(Reverse(ChangeUniverse(R, Integers())), 2) + 1), 2, 7)), GF(2));
	R := [A[i] + L[i + 2] + KI[i] : i in [1..7]];
	A := ChangeUniverse(Reverse(Intseq(S9(Seqint(Reverse(ChangeUniverse([L[i] + KI[i + 7] : i in [1..9]], Integers())), 2) + 1), 2, 9)), GF(2));
	L := [A[i] + ([0, 0] cat R)[i] : i in [1..9]];
	A := ChangeUniverse(Reverse(Intseq(S7(Seqint(Reverse(ChangeUniverse(R, Integers())), 2) + 1), 2, 7)), GF(2));
	R := [A[i] + L[i+2] : i in [1..7]];
	return R cat L;
end function;

//FO function
//Input: 	32 bit sequence I
//			KO - sequence of 3 sequences of 16 bits
//			KI - sequence of 3 sequences of 16 bits
//Output: 	32 bit sequence
function FO(I, KO, KI)
	//Split the input in two sequences of 16 elements
	L := I[1..16];
	R := I[17..32];
	//3 rounds:
	//	Compute FI
	//	Update R and L
	//Equivalent to the following for, that was removed to reduce assignments
	/* for i in [1,2,3] do
		Fi := FI([L[j] + KO[i][j] : j in [1..16]], KI[i]);
		R1 := [Fi[k] + R[k] : k in [1..16]];
		L := R;
		R := R1;
	end for; */
	//Each round uses the same variable to minimize the memory we use
	Fi := FI([L[j] + KO[1][j] : j in [1..16]], KI[1]);
	L := [Fi[k] + R[k] : k in [1..16]];
	Fi := FI([R[j] + KO[2][j] : j in [1..16]], KI[2]);
	R := [Fi[k] + L[k] : k in [1..16]];
	Fi := FI([L[j] + KO[3][j] : j in [1..16]], KI[3]);
	L := [Fi[k] + R[k] : k in [1..16]];
	return R cat L;
end function;

//FL function
//Input: 	32 bit sequence I
//			KL - sequence of 2 sequences of 16 bits
//Output: 	32 bit sequence
function FL(I, KL)
	//Rotate using indexes with mod not to repeat the same operation (rotate) for each bit (16 times)
	R := [I[j+16] + I[j mod 16 + 1] * KL[1][j mod 16 + 1] : j in [1..16]];
	L := [I[j] + Max([R[j mod 16 + 1], KL[2][j mod 16 + 1]]) : j in [1..16]];
	return L cat R;
end function;

//KeySchedule
//Input: 	32 characters string K (hexadecimal)
//Output: 	KL - sequence of 8 sequences of 2 sequences of 16 bits
//			KO - sequence of 8 sequences of 3 sequences of 16 bits
//			KI - sequence of 8 sequences of 3 sequences of 16 bits
function KeySchedule(K)
	//Definition of constants
	C := [	[GF(2)|0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1], 
			[GF(2)|0,1,0,0,0,1,0,1,0,1,1,0,0,1,1,1], 
			[GF(2)|1,0,0,0,1,0,0,1,1,0,1,0,1,0,1,1], 
			[GF(2)|1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,1], 
			[GF(2)|1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0], 
			[GF(2)|1,0,1,1,1,0,1,0,1,0,0,1,1,0,0,0], 
			[GF(2)|0,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0], 
			[GF(2)|0,0,1,1,0,0,1,0,0,0,0,1,0,0,0,0]	];
	//Convertion of K in in GF(2) and split of K in 8 sequences of 16 bits
	K := [ChangeUniverse(Reverse(Intseq(StringToInteger(K[i..(i + 3)],16), 2, 16)), GF(2)) : i in [1..32 by 4]];
	//Computation of K' xoring K and C
	K1 := [[K[i][j] + C[i][j] : j in [1..16]] : i in [1..8]];
	//Computation of KL, KO, KI
	KL := [[[K[i][j mod 16 + 1] : j in [1..16]], K1[(i+1) mod 8 +1]] : i in [1..8]];
	KO := [[Rotate(K[(i) mod 8 +1],-5), Rotate(K[(i+4) mod 8 +1],-8), Rotate(K[(i+5) mod 8 +1],-13)] : i in [1..8]];
	KI := [[K1[(i+3) mod 8 +1], K1[(i+2) mod 8 +1], K1[(i+6) mod 8 +1]] : i in [1..8]];
	return KL, KO, KI;
end function;

//Kasumi
//Input: 	16 characters string P (hexadecimal)
//			32 characters string K (hexadecimal)
//Output: 	16 characters string C (hexadecimal)
function Kasumi(P,K)
	//Computation of KeySchedule
	KL, KO, KI := KeySchedule(K);
	//Split P in two sequences of 32 bits and conversion in binary values
	L := ChangeUniverse(Reverse(Intseq(StringToInteger(P[1..8], 16), 2, 32)), GF(2));
	R := ChangeUniverse(Reverse(Intseq(StringToInteger(P[9..16], 16), 2, 32)), GF(2));
	//8 rounds implemented in pairs to reduce the number of assignments
	//Each round uses the same variable to minimize the memory we use
	for i in [1,3,5,7] do
		//Odd round:
		//	Compute FL
		//	Compute FO
		//	(precomputation not to repeat the operations for each bit (32 times))
		//	Xor with right part of input
		fL := FO(FL(L,KL[i]), KO[i], KI[i]);
		R := [R[j] + fL[j] : j in [1..32]];
		//Even round:
		//	Compute FO
		//	Compute FL
		//	(precomputation not to repeat the operations for each bit (32 times))
		//	Xor with right part of input
		fL := FL(FO(R,KO[i+1],KI[i+1]), KL[i+1]);
		L := [L[j] + fL[j] : j in [1..32]];
	end for;
	//Conversion of C in 16 characters string (hexadecimal)
	C := IntegerToString(Seqint(Reverse(ChangeUniverse(L cat R,Integers())), 2), 16);
	//Add zeros at the beginning of C if needed
	while #C lt 16 do
		C := "0" cat C;
	end while;
	return C;
end function;

//KasumiDecryption
//Input: 	16 characters string C (hexadecimal)
//			32 characters string K (hexadecimal)
//Output: 	16 characters string P (hexadecimal)
function KasumiDecryption(C,K)
	//Computation of KeySchedule
	KL, KO, KI := KeySchedule(K);
	//Split C in two sequences of 32 bits and conversion in binary values
	L := ChangeUniverse(Reverse(Intseq(StringToInteger(C[1..8], 16), 2, 32)), GF(2));
	R := ChangeUniverse(Reverse(Intseq(StringToInteger(C[9..16], 16), 2, 32)), GF(2));
	//8 rounds implemented in pairs to reduce the number of assignments
	//Each round uses the same variable to minimize the memory we use
	for i in [7,5,3,1] do
		//Even round:
		//	Compute FO
		//	Compute FL
		//	(precomputation not to repeat the operations for each bit (32 times))
		//	Xor with left part of input
		fL := FL(FO(R,KO[i+1],KI[i+1]), KL[i+1]);
		L := [L[j] + fL[j] : j in [1..32]];
		//Odd round:
		//	Compute FL
		//	Compute FO
		//	(precomputation not to repeat the operations for each bit (32 times))
		//	Xor with left part of input
		fL := FO(FL(L,KL[i]), KO[i], KI[i]);
		R := [R[j] + fL[j] : j in [1..32]];
	end for;
	//Conversion of P in 16 characters string (hexadecimal)
	P := IntegerToString(Seqint(Reverse(ChangeUniverse(L cat R,Integers())), 2), 16);
	//Add zeros at the beginning of P if needed
	while #P lt 16 do
		P := "0" cat P;
	end while;
	return P;
end function;